// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1/certificate.proto

package com.google.appengine.v1;

/**
 * <pre>
 * An SSL certificate that a user has been authorized to administer. A user
 * is authorized to administer any certificate that applies to one of their
 * authorized domains.
 * </pre>
 *
 * Protobuf type {@code google.appengine.v1.AuthorizedCertificate}
 */
public final class AuthorizedCertificate extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.appengine.v1.AuthorizedCertificate)
    AuthorizedCertificateOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AuthorizedCertificate.newBuilder() to construct.
  private AuthorizedCertificate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AuthorizedCertificate() {
    name_ = "";
    id_ = "";
    displayName_ = "";
    domainNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    visibleDomainMappings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AuthorizedCertificate();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private AuthorizedCertificate(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            id_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            displayName_ = s;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              domainNames_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            domainNames_.add(s);
            break;
          }
          case 42: {
            com.google.protobuf.Timestamp.Builder subBuilder = null;
            if (expireTime_ != null) {
              subBuilder = expireTime_.toBuilder();
            }
            expireTime_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(expireTime_);
              expireTime_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            com.google.appengine.v1.CertificateRawData.Builder subBuilder = null;
            if (certificateRawData_ != null) {
              subBuilder = certificateRawData_.toBuilder();
            }
            certificateRawData_ = input.readMessage(com.google.appengine.v1.CertificateRawData.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(certificateRawData_);
              certificateRawData_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            com.google.appengine.v1.ManagedCertificate.Builder subBuilder = null;
            if (managedCertificate_ != null) {
              subBuilder = managedCertificate_.toBuilder();
            }
            managedCertificate_ = input.readMessage(com.google.appengine.v1.ManagedCertificate.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(managedCertificate_);
              managedCertificate_ = subBuilder.buildPartial();
            }

            break;
          }
          case 66: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              visibleDomainMappings_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            visibleDomainMappings_.add(s);
            break;
          }
          case 72: {

            domainMappingsCount_ = input.readInt32();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        domainNames_ = domainNames_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        visibleDomainMappings_ = visibleDomainMappings_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.appengine.v1.CertificateProto.internal_static_google_appengine_v1_AuthorizedCertificate_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.appengine.v1.CertificateProto.internal_static_google_appengine_v1_AuthorizedCertificate_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.appengine.v1.AuthorizedCertificate.class, com.google.appengine.v1.AuthorizedCertificate.Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * Full path to the `AuthorizedCertificate` resource in the API. Example:
   * `apps/myapp/authorizedCertificates/12345`.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Full path to the `AuthorizedCertificate` resource in the API. Example:
   * `apps/myapp/authorizedCertificates/12345`.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ID_FIELD_NUMBER = 2;
  private volatile java.lang.Object id_;
  /**
   * <pre>
   * Relative name of the certificate. This is a unique value autogenerated
   * on `AuthorizedCertificate` resource creation. Example: `12345`.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>string id = 2;</code>
   * @return The id.
   */
  @java.lang.Override
  public java.lang.String getId() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      id_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Relative name of the certificate. This is a unique value autogenerated
   * on `AuthorizedCertificate` resource creation. Example: `12345`.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>string id = 2;</code>
   * @return The bytes for id.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getIdBytes() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      id_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DISPLAY_NAME_FIELD_NUMBER = 3;
  private volatile java.lang.Object displayName_;
  /**
   * <pre>
   * The user-specified display name of the certificate. This is not
   * guaranteed to be unique. Example: `My Certificate`.
   * </pre>
   *
   * <code>string display_name = 3;</code>
   * @return The displayName.
   */
  @java.lang.Override
  public java.lang.String getDisplayName() {
    java.lang.Object ref = displayName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      displayName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The user-specified display name of the certificate. This is not
   * guaranteed to be unique. Example: `My Certificate`.
   * </pre>
   *
   * <code>string display_name = 3;</code>
   * @return The bytes for displayName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDisplayNameBytes() {
    java.lang.Object ref = displayName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      displayName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DOMAIN_NAMES_FIELD_NUMBER = 4;
  private com.google.protobuf.LazyStringList domainNames_;
  /**
   * <pre>
   * Topmost applicable domains of this certificate. This certificate
   * applies to these domains and their subdomains. Example: `example.com`.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>repeated string domain_names = 4;</code>
   * @return A list containing the domainNames.
   */
  public com.google.protobuf.ProtocolStringList
      getDomainNamesList() {
    return domainNames_;
  }
  /**
   * <pre>
   * Topmost applicable domains of this certificate. This certificate
   * applies to these domains and their subdomains. Example: `example.com`.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>repeated string domain_names = 4;</code>
   * @return The count of domainNames.
   */
  public int getDomainNamesCount() {
    return domainNames_.size();
  }
  /**
   * <pre>
   * Topmost applicable domains of this certificate. This certificate
   * applies to these domains and their subdomains. Example: `example.com`.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>repeated string domain_names = 4;</code>
   * @param index The index of the element to return.
   * @return The domainNames at the given index.
   */
  public java.lang.String getDomainNames(int index) {
    return domainNames_.get(index);
  }
  /**
   * <pre>
   * Topmost applicable domains of this certificate. This certificate
   * applies to these domains and their subdomains. Example: `example.com`.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>repeated string domain_names = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the domainNames at the given index.
   */
  public com.google.protobuf.ByteString
      getDomainNamesBytes(int index) {
    return domainNames_.getByteString(index);
  }

  public static final int EXPIRE_TIME_FIELD_NUMBER = 5;
  private com.google.protobuf.Timestamp expireTime_;
  /**
   * <pre>
   * The time when this certificate expires. To update the renewal time on this
   * certificate, upload an SSL certificate with a different expiration time
   * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
   * &#64;OutputOnly
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 5;</code>
   * @return Whether the expireTime field is set.
   */
  @java.lang.Override
  public boolean hasExpireTime() {
    return expireTime_ != null;
  }
  /**
   * <pre>
   * The time when this certificate expires. To update the renewal time on this
   * certificate, upload an SSL certificate with a different expiration time
   * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
   * &#64;OutputOnly
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 5;</code>
   * @return The expireTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getExpireTime() {
    return expireTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expireTime_;
  }
  /**
   * <pre>
   * The time when this certificate expires. To update the renewal time on this
   * certificate, upload an SSL certificate with a different expiration time
   * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
   * &#64;OutputOnly
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 5;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getExpireTimeOrBuilder() {
    return getExpireTime();
  }

  public static final int CERTIFICATE_RAW_DATA_FIELD_NUMBER = 6;
  private com.google.appengine.v1.CertificateRawData certificateRawData_;
  /**
   * <pre>
   * The SSL certificate serving the `AuthorizedCertificate` resource. This
   * must be obtained independently from a certificate authority.
   * </pre>
   *
   * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
   * @return Whether the certificateRawData field is set.
   */
  @java.lang.Override
  public boolean hasCertificateRawData() {
    return certificateRawData_ != null;
  }
  /**
   * <pre>
   * The SSL certificate serving the `AuthorizedCertificate` resource. This
   * must be obtained independently from a certificate authority.
   * </pre>
   *
   * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
   * @return The certificateRawData.
   */
  @java.lang.Override
  public com.google.appengine.v1.CertificateRawData getCertificateRawData() {
    return certificateRawData_ == null ? com.google.appengine.v1.CertificateRawData.getDefaultInstance() : certificateRawData_;
  }
  /**
   * <pre>
   * The SSL certificate serving the `AuthorizedCertificate` resource. This
   * must be obtained independently from a certificate authority.
   * </pre>
   *
   * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
   */
  @java.lang.Override
  public com.google.appengine.v1.CertificateRawDataOrBuilder getCertificateRawDataOrBuilder() {
    return getCertificateRawData();
  }

  public static final int MANAGED_CERTIFICATE_FIELD_NUMBER = 7;
  private com.google.appengine.v1.ManagedCertificate managedCertificate_;
  /**
   * <pre>
   * Only applicable if this certificate is managed by App Engine. Managed
   * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
   * updated or deleted via the `AuthorizedCertificates` API. If this
   * certificate is manually administered by the user, this field will be empty.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
   * @return Whether the managedCertificate field is set.
   */
  @java.lang.Override
  public boolean hasManagedCertificate() {
    return managedCertificate_ != null;
  }
  /**
   * <pre>
   * Only applicable if this certificate is managed by App Engine. Managed
   * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
   * updated or deleted via the `AuthorizedCertificates` API. If this
   * certificate is manually administered by the user, this field will be empty.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
   * @return The managedCertificate.
   */
  @java.lang.Override
  public com.google.appengine.v1.ManagedCertificate getManagedCertificate() {
    return managedCertificate_ == null ? com.google.appengine.v1.ManagedCertificate.getDefaultInstance() : managedCertificate_;
  }
  /**
   * <pre>
   * Only applicable if this certificate is managed by App Engine. Managed
   * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
   * updated or deleted via the `AuthorizedCertificates` API. If this
   * certificate is manually administered by the user, this field will be empty.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
   */
  @java.lang.Override
  public com.google.appengine.v1.ManagedCertificateOrBuilder getManagedCertificateOrBuilder() {
    return getManagedCertificate();
  }

  public static final int VISIBLE_DOMAIN_MAPPINGS_FIELD_NUMBER = 8;
  private com.google.protobuf.LazyStringList visibleDomainMappings_;
  /**
   * <pre>
   * The full paths to user visible Domain Mapping resources that have this
   * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
   * This may not represent the full list of mapped domain mappings if the user
   * does not have `VIEWER` permissions on all of the applications that have
   * this certificate mapped. See `domain_mappings_count` for a complete count.
   * Only returned by `GET` or `LIST` requests when specifically requested by
   * the `view=FULL_CERTIFICATE` option.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>repeated string visible_domain_mappings = 8;</code>
   * @return A list containing the visibleDomainMappings.
   */
  public com.google.protobuf.ProtocolStringList
      getVisibleDomainMappingsList() {
    return visibleDomainMappings_;
  }
  /**
   * <pre>
   * The full paths to user visible Domain Mapping resources that have this
   * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
   * This may not represent the full list of mapped domain mappings if the user
   * does not have `VIEWER` permissions on all of the applications that have
   * this certificate mapped. See `domain_mappings_count` for a complete count.
   * Only returned by `GET` or `LIST` requests when specifically requested by
   * the `view=FULL_CERTIFICATE` option.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>repeated string visible_domain_mappings = 8;</code>
   * @return The count of visibleDomainMappings.
   */
  public int getVisibleDomainMappingsCount() {
    return visibleDomainMappings_.size();
  }
  /**
   * <pre>
   * The full paths to user visible Domain Mapping resources that have this
   * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
   * This may not represent the full list of mapped domain mappings if the user
   * does not have `VIEWER` permissions on all of the applications that have
   * this certificate mapped. See `domain_mappings_count` for a complete count.
   * Only returned by `GET` or `LIST` requests when specifically requested by
   * the `view=FULL_CERTIFICATE` option.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>repeated string visible_domain_mappings = 8;</code>
   * @param index The index of the element to return.
   * @return The visibleDomainMappings at the given index.
   */
  public java.lang.String getVisibleDomainMappings(int index) {
    return visibleDomainMappings_.get(index);
  }
  /**
   * <pre>
   * The full paths to user visible Domain Mapping resources that have this
   * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
   * This may not represent the full list of mapped domain mappings if the user
   * does not have `VIEWER` permissions on all of the applications that have
   * this certificate mapped. See `domain_mappings_count` for a complete count.
   * Only returned by `GET` or `LIST` requests when specifically requested by
   * the `view=FULL_CERTIFICATE` option.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>repeated string visible_domain_mappings = 8;</code>
   * @param index The index of the value to return.
   * @return The bytes of the visibleDomainMappings at the given index.
   */
  public com.google.protobuf.ByteString
      getVisibleDomainMappingsBytes(int index) {
    return visibleDomainMappings_.getByteString(index);
  }

  public static final int DOMAIN_MAPPINGS_COUNT_FIELD_NUMBER = 9;
  private int domainMappingsCount_;
  /**
   * <pre>
   * Aggregate count of the domain mappings with this certificate mapped. This
   * count includes domain mappings on applications for which the user does not
   * have `VIEWER` permissions.
   * Only returned by `GET` or `LIST` requests when specifically requested by
   * the `view=FULL_CERTIFICATE` option.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>int32 domain_mappings_count = 9;</code>
   * @return The domainMappingsCount.
   */
  @java.lang.Override
  public int getDomainMappingsCount() {
    return domainMappingsCount_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (!getIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, id_);
    }
    if (!getDisplayNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, displayName_);
    }
    for (int i = 0; i < domainNames_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, domainNames_.getRaw(i));
    }
    if (expireTime_ != null) {
      output.writeMessage(5, getExpireTime());
    }
    if (certificateRawData_ != null) {
      output.writeMessage(6, getCertificateRawData());
    }
    if (managedCertificate_ != null) {
      output.writeMessage(7, getManagedCertificate());
    }
    for (int i = 0; i < visibleDomainMappings_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, visibleDomainMappings_.getRaw(i));
    }
    if (domainMappingsCount_ != 0) {
      output.writeInt32(9, domainMappingsCount_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (!getIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, id_);
    }
    if (!getDisplayNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, displayName_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < domainNames_.size(); i++) {
        dataSize += computeStringSizeNoTag(domainNames_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getDomainNamesList().size();
    }
    if (expireTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getExpireTime());
    }
    if (certificateRawData_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getCertificateRawData());
    }
    if (managedCertificate_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getManagedCertificate());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < visibleDomainMappings_.size(); i++) {
        dataSize += computeStringSizeNoTag(visibleDomainMappings_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getVisibleDomainMappingsList().size();
    }
    if (domainMappingsCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, domainMappingsCount_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.appengine.v1.AuthorizedCertificate)) {
      return super.equals(obj);
    }
    com.google.appengine.v1.AuthorizedCertificate other = (com.google.appengine.v1.AuthorizedCertificate) obj;

    if (!getName()
        .equals(other.getName())) return false;
    if (!getId()
        .equals(other.getId())) return false;
    if (!getDisplayName()
        .equals(other.getDisplayName())) return false;
    if (!getDomainNamesList()
        .equals(other.getDomainNamesList())) return false;
    if (hasExpireTime() != other.hasExpireTime()) return false;
    if (hasExpireTime()) {
      if (!getExpireTime()
          .equals(other.getExpireTime())) return false;
    }
    if (hasCertificateRawData() != other.hasCertificateRawData()) return false;
    if (hasCertificateRawData()) {
      if (!getCertificateRawData()
          .equals(other.getCertificateRawData())) return false;
    }
    if (hasManagedCertificate() != other.hasManagedCertificate()) return false;
    if (hasManagedCertificate()) {
      if (!getManagedCertificate()
          .equals(other.getManagedCertificate())) return false;
    }
    if (!getVisibleDomainMappingsList()
        .equals(other.getVisibleDomainMappingsList())) return false;
    if (getDomainMappingsCount()
        != other.getDomainMappingsCount()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + ID_FIELD_NUMBER;
    hash = (53 * hash) + getId().hashCode();
    hash = (37 * hash) + DISPLAY_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getDisplayName().hashCode();
    if (getDomainNamesCount() > 0) {
      hash = (37 * hash) + DOMAIN_NAMES_FIELD_NUMBER;
      hash = (53 * hash) + getDomainNamesList().hashCode();
    }
    if (hasExpireTime()) {
      hash = (37 * hash) + EXPIRE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getExpireTime().hashCode();
    }
    if (hasCertificateRawData()) {
      hash = (37 * hash) + CERTIFICATE_RAW_DATA_FIELD_NUMBER;
      hash = (53 * hash) + getCertificateRawData().hashCode();
    }
    if (hasManagedCertificate()) {
      hash = (37 * hash) + MANAGED_CERTIFICATE_FIELD_NUMBER;
      hash = (53 * hash) + getManagedCertificate().hashCode();
    }
    if (getVisibleDomainMappingsCount() > 0) {
      hash = (37 * hash) + VISIBLE_DOMAIN_MAPPINGS_FIELD_NUMBER;
      hash = (53 * hash) + getVisibleDomainMappingsList().hashCode();
    }
    hash = (37 * hash) + DOMAIN_MAPPINGS_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + getDomainMappingsCount();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.appengine.v1.AuthorizedCertificate parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.appengine.v1.AuthorizedCertificate parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.appengine.v1.AuthorizedCertificate parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.appengine.v1.AuthorizedCertificate parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.appengine.v1.AuthorizedCertificate parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.appengine.v1.AuthorizedCertificate parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.appengine.v1.AuthorizedCertificate parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.appengine.v1.AuthorizedCertificate parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.appengine.v1.AuthorizedCertificate parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.appengine.v1.AuthorizedCertificate parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.appengine.v1.AuthorizedCertificate parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.appengine.v1.AuthorizedCertificate parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.appengine.v1.AuthorizedCertificate prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * An SSL certificate that a user has been authorized to administer. A user
   * is authorized to administer any certificate that applies to one of their
   * authorized domains.
   * </pre>
   *
   * Protobuf type {@code google.appengine.v1.AuthorizedCertificate}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.appengine.v1.AuthorizedCertificate)
      com.google.appengine.v1.AuthorizedCertificateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.appengine.v1.CertificateProto.internal_static_google_appengine_v1_AuthorizedCertificate_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.appengine.v1.CertificateProto.internal_static_google_appengine_v1_AuthorizedCertificate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.appengine.v1.AuthorizedCertificate.class, com.google.appengine.v1.AuthorizedCertificate.Builder.class);
    }

    // Construct using com.google.appengine.v1.AuthorizedCertificate.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      name_ = "";

      id_ = "";

      displayName_ = "";

      domainNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      if (expireTimeBuilder_ == null) {
        expireTime_ = null;
      } else {
        expireTime_ = null;
        expireTimeBuilder_ = null;
      }
      if (certificateRawDataBuilder_ == null) {
        certificateRawData_ = null;
      } else {
        certificateRawData_ = null;
        certificateRawDataBuilder_ = null;
      }
      if (managedCertificateBuilder_ == null) {
        managedCertificate_ = null;
      } else {
        managedCertificate_ = null;
        managedCertificateBuilder_ = null;
      }
      visibleDomainMappings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      domainMappingsCount_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.appengine.v1.CertificateProto.internal_static_google_appengine_v1_AuthorizedCertificate_descriptor;
    }

    @java.lang.Override
    public com.google.appengine.v1.AuthorizedCertificate getDefaultInstanceForType() {
      return com.google.appengine.v1.AuthorizedCertificate.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.appengine.v1.AuthorizedCertificate build() {
      com.google.appengine.v1.AuthorizedCertificate result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.appengine.v1.AuthorizedCertificate buildPartial() {
      com.google.appengine.v1.AuthorizedCertificate result = new com.google.appengine.v1.AuthorizedCertificate(this);
      int from_bitField0_ = bitField0_;
      result.name_ = name_;
      result.id_ = id_;
      result.displayName_ = displayName_;
      if (((bitField0_ & 0x00000001) != 0)) {
        domainNames_ = domainNames_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.domainNames_ = domainNames_;
      if (expireTimeBuilder_ == null) {
        result.expireTime_ = expireTime_;
      } else {
        result.expireTime_ = expireTimeBuilder_.build();
      }
      if (certificateRawDataBuilder_ == null) {
        result.certificateRawData_ = certificateRawData_;
      } else {
        result.certificateRawData_ = certificateRawDataBuilder_.build();
      }
      if (managedCertificateBuilder_ == null) {
        result.managedCertificate_ = managedCertificate_;
      } else {
        result.managedCertificate_ = managedCertificateBuilder_.build();
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        visibleDomainMappings_ = visibleDomainMappings_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.visibleDomainMappings_ = visibleDomainMappings_;
      result.domainMappingsCount_ = domainMappingsCount_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.appengine.v1.AuthorizedCertificate) {
        return mergeFrom((com.google.appengine.v1.AuthorizedCertificate)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.appengine.v1.AuthorizedCertificate other) {
      if (other == com.google.appengine.v1.AuthorizedCertificate.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.getId().isEmpty()) {
        id_ = other.id_;
        onChanged();
      }
      if (!other.getDisplayName().isEmpty()) {
        displayName_ = other.displayName_;
        onChanged();
      }
      if (!other.domainNames_.isEmpty()) {
        if (domainNames_.isEmpty()) {
          domainNames_ = other.domainNames_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureDomainNamesIsMutable();
          domainNames_.addAll(other.domainNames_);
        }
        onChanged();
      }
      if (other.hasExpireTime()) {
        mergeExpireTime(other.getExpireTime());
      }
      if (other.hasCertificateRawData()) {
        mergeCertificateRawData(other.getCertificateRawData());
      }
      if (other.hasManagedCertificate()) {
        mergeManagedCertificate(other.getManagedCertificate());
      }
      if (!other.visibleDomainMappings_.isEmpty()) {
        if (visibleDomainMappings_.isEmpty()) {
          visibleDomainMappings_ = other.visibleDomainMappings_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureVisibleDomainMappingsIsMutable();
          visibleDomainMappings_.addAll(other.visibleDomainMappings_);
        }
        onChanged();
      }
      if (other.getDomainMappingsCount() != 0) {
        setDomainMappingsCount(other.getDomainMappingsCount());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.appengine.v1.AuthorizedCertificate parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.appengine.v1.AuthorizedCertificate) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * Full path to the `AuthorizedCertificate` resource in the API. Example:
     * `apps/myapp/authorizedCertificates/12345`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Full path to the `AuthorizedCertificate` resource in the API. Example:
     * `apps/myapp/authorizedCertificates/12345`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Full path to the `AuthorizedCertificate` resource in the API. Example:
     * `apps/myapp/authorizedCertificates/12345`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Full path to the `AuthorizedCertificate` resource in the API. Example:
     * `apps/myapp/authorizedCertificates/12345`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Full path to the `AuthorizedCertificate` resource in the API. Example:
     * `apps/myapp/authorizedCertificates/12345`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object id_ = "";
    /**
     * <pre>
     * Relative name of the certificate. This is a unique value autogenerated
     * on `AuthorizedCertificate` resource creation. Example: `12345`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string id = 2;</code>
     * @return The id.
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Relative name of the certificate. This is a unique value autogenerated
     * on `AuthorizedCertificate` resource creation. Example: `12345`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string id = 2;</code>
     * @return The bytes for id.
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Relative name of the certificate. This is a unique value autogenerated
     * on `AuthorizedCertificate` resource creation. Example: `12345`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string id = 2;</code>
     * @param value The id to set.
     * @return This builder for chaining.
     */
    public Builder setId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      id_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Relative name of the certificate. This is a unique value autogenerated
     * on `AuthorizedCertificate` resource creation. Example: `12345`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearId() {
      
      id_ = getDefaultInstance().getId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Relative name of the certificate. This is a unique value autogenerated
     * on `AuthorizedCertificate` resource creation. Example: `12345`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string id = 2;</code>
     * @param value The bytes for id to set.
     * @return This builder for chaining.
     */
    public Builder setIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      id_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object displayName_ = "";
    /**
     * <pre>
     * The user-specified display name of the certificate. This is not
     * guaranteed to be unique. Example: `My Certificate`.
     * </pre>
     *
     * <code>string display_name = 3;</code>
     * @return The displayName.
     */
    public java.lang.String getDisplayName() {
      java.lang.Object ref = displayName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        displayName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The user-specified display name of the certificate. This is not
     * guaranteed to be unique. Example: `My Certificate`.
     * </pre>
     *
     * <code>string display_name = 3;</code>
     * @return The bytes for displayName.
     */
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      java.lang.Object ref = displayName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        displayName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The user-specified display name of the certificate. This is not
     * guaranteed to be unique. Example: `My Certificate`.
     * </pre>
     *
     * <code>string display_name = 3;</code>
     * @param value The displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      displayName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The user-specified display name of the certificate. This is not
     * guaranteed to be unique. Example: `My Certificate`.
     * </pre>
     *
     * <code>string display_name = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisplayName() {
      
      displayName_ = getDefaultInstance().getDisplayName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The user-specified display name of the certificate. This is not
     * guaranteed to be unique. Example: `My Certificate`.
     * </pre>
     *
     * <code>string display_name = 3;</code>
     * @param value The bytes for displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      displayName_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList domainNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureDomainNamesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        domainNames_ = new com.google.protobuf.LazyStringArrayList(domainNames_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * Topmost applicable domains of this certificate. This certificate
     * applies to these domains and their subdomains. Example: `example.com`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string domain_names = 4;</code>
     * @return A list containing the domainNames.
     */
    public com.google.protobuf.ProtocolStringList
        getDomainNamesList() {
      return domainNames_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Topmost applicable domains of this certificate. This certificate
     * applies to these domains and their subdomains. Example: `example.com`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string domain_names = 4;</code>
     * @return The count of domainNames.
     */
    public int getDomainNamesCount() {
      return domainNames_.size();
    }
    /**
     * <pre>
     * Topmost applicable domains of this certificate. This certificate
     * applies to these domains and their subdomains. Example: `example.com`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string domain_names = 4;</code>
     * @param index The index of the element to return.
     * @return The domainNames at the given index.
     */
    public java.lang.String getDomainNames(int index) {
      return domainNames_.get(index);
    }
    /**
     * <pre>
     * Topmost applicable domains of this certificate. This certificate
     * applies to these domains and their subdomains. Example: `example.com`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string domain_names = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the domainNames at the given index.
     */
    public com.google.protobuf.ByteString
        getDomainNamesBytes(int index) {
      return domainNames_.getByteString(index);
    }
    /**
     * <pre>
     * Topmost applicable domains of this certificate. This certificate
     * applies to these domains and their subdomains. Example: `example.com`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string domain_names = 4;</code>
     * @param index The index to set the value at.
     * @param value The domainNames to set.
     * @return This builder for chaining.
     */
    public Builder setDomainNames(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDomainNamesIsMutable();
      domainNames_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Topmost applicable domains of this certificate. This certificate
     * applies to these domains and their subdomains. Example: `example.com`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string domain_names = 4;</code>
     * @param value The domainNames to add.
     * @return This builder for chaining.
     */
    public Builder addDomainNames(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDomainNamesIsMutable();
      domainNames_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Topmost applicable domains of this certificate. This certificate
     * applies to these domains and their subdomains. Example: `example.com`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string domain_names = 4;</code>
     * @param values The domainNames to add.
     * @return This builder for chaining.
     */
    public Builder addAllDomainNames(
        java.lang.Iterable<java.lang.String> values) {
      ensureDomainNamesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, domainNames_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Topmost applicable domains of this certificate. This certificate
     * applies to these domains and their subdomains. Example: `example.com`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string domain_names = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearDomainNames() {
      domainNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Topmost applicable domains of this certificate. This certificate
     * applies to these domains and their subdomains. Example: `example.com`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string domain_names = 4;</code>
     * @param value The bytes of the domainNames to add.
     * @return This builder for chaining.
     */
    public Builder addDomainNamesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureDomainNamesIsMutable();
      domainNames_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.Timestamp expireTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> expireTimeBuilder_;
    /**
     * <pre>
     * The time when this certificate expires. To update the renewal time on this
     * certificate, upload an SSL certificate with a different expiration time
     * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 5;</code>
     * @return Whether the expireTime field is set.
     */
    public boolean hasExpireTime() {
      return expireTimeBuilder_ != null || expireTime_ != null;
    }
    /**
     * <pre>
     * The time when this certificate expires. To update the renewal time on this
     * certificate, upload an SSL certificate with a different expiration time
     * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 5;</code>
     * @return The expireTime.
     */
    public com.google.protobuf.Timestamp getExpireTime() {
      if (expireTimeBuilder_ == null) {
        return expireTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expireTime_;
      } else {
        return expireTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The time when this certificate expires. To update the renewal time on this
     * certificate, upload an SSL certificate with a different expiration time
     * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 5;</code>
     */
    public Builder setExpireTime(com.google.protobuf.Timestamp value) {
      if (expireTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        expireTime_ = value;
        onChanged();
      } else {
        expireTimeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The time when this certificate expires. To update the renewal time on this
     * certificate, upload an SSL certificate with a different expiration time
     * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 5;</code>
     */
    public Builder setExpireTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (expireTimeBuilder_ == null) {
        expireTime_ = builderForValue.build();
        onChanged();
      } else {
        expireTimeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The time when this certificate expires. To update the renewal time on this
     * certificate, upload an SSL certificate with a different expiration time
     * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 5;</code>
     */
    public Builder mergeExpireTime(com.google.protobuf.Timestamp value) {
      if (expireTimeBuilder_ == null) {
        if (expireTime_ != null) {
          expireTime_ =
            com.google.protobuf.Timestamp.newBuilder(expireTime_).mergeFrom(value).buildPartial();
        } else {
          expireTime_ = value;
        }
        onChanged();
      } else {
        expireTimeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The time when this certificate expires. To update the renewal time on this
     * certificate, upload an SSL certificate with a different expiration time
     * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 5;</code>
     */
    public Builder clearExpireTime() {
      if (expireTimeBuilder_ == null) {
        expireTime_ = null;
        onChanged();
      } else {
        expireTime_ = null;
        expireTimeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The time when this certificate expires. To update the renewal time on this
     * certificate, upload an SSL certificate with a different expiration time
     * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 5;</code>
     */
    public com.google.protobuf.Timestamp.Builder getExpireTimeBuilder() {
      
      onChanged();
      return getExpireTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The time when this certificate expires. To update the renewal time on this
     * certificate, upload an SSL certificate with a different expiration time
     * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 5;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getExpireTimeOrBuilder() {
      if (expireTimeBuilder_ != null) {
        return expireTimeBuilder_.getMessageOrBuilder();
      } else {
        return expireTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : expireTime_;
      }
    }
    /**
     * <pre>
     * The time when this certificate expires. To update the renewal time on this
     * certificate, upload an SSL certificate with a different expiration time
     * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getExpireTimeFieldBuilder() {
      if (expireTimeBuilder_ == null) {
        expireTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getExpireTime(),
                getParentForChildren(),
                isClean());
        expireTime_ = null;
      }
      return expireTimeBuilder_;
    }

    private com.google.appengine.v1.CertificateRawData certificateRawData_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.appengine.v1.CertificateRawData, com.google.appengine.v1.CertificateRawData.Builder, com.google.appengine.v1.CertificateRawDataOrBuilder> certificateRawDataBuilder_;
    /**
     * <pre>
     * The SSL certificate serving the `AuthorizedCertificate` resource. This
     * must be obtained independently from a certificate authority.
     * </pre>
     *
     * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
     * @return Whether the certificateRawData field is set.
     */
    public boolean hasCertificateRawData() {
      return certificateRawDataBuilder_ != null || certificateRawData_ != null;
    }
    /**
     * <pre>
     * The SSL certificate serving the `AuthorizedCertificate` resource. This
     * must be obtained independently from a certificate authority.
     * </pre>
     *
     * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
     * @return The certificateRawData.
     */
    public com.google.appengine.v1.CertificateRawData getCertificateRawData() {
      if (certificateRawDataBuilder_ == null) {
        return certificateRawData_ == null ? com.google.appengine.v1.CertificateRawData.getDefaultInstance() : certificateRawData_;
      } else {
        return certificateRawDataBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The SSL certificate serving the `AuthorizedCertificate` resource. This
     * must be obtained independently from a certificate authority.
     * </pre>
     *
     * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
     */
    public Builder setCertificateRawData(com.google.appengine.v1.CertificateRawData value) {
      if (certificateRawDataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        certificateRawData_ = value;
        onChanged();
      } else {
        certificateRawDataBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The SSL certificate serving the `AuthorizedCertificate` resource. This
     * must be obtained independently from a certificate authority.
     * </pre>
     *
     * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
     */
    public Builder setCertificateRawData(
        com.google.appengine.v1.CertificateRawData.Builder builderForValue) {
      if (certificateRawDataBuilder_ == null) {
        certificateRawData_ = builderForValue.build();
        onChanged();
      } else {
        certificateRawDataBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The SSL certificate serving the `AuthorizedCertificate` resource. This
     * must be obtained independently from a certificate authority.
     * </pre>
     *
     * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
     */
    public Builder mergeCertificateRawData(com.google.appengine.v1.CertificateRawData value) {
      if (certificateRawDataBuilder_ == null) {
        if (certificateRawData_ != null) {
          certificateRawData_ =
            com.google.appengine.v1.CertificateRawData.newBuilder(certificateRawData_).mergeFrom(value).buildPartial();
        } else {
          certificateRawData_ = value;
        }
        onChanged();
      } else {
        certificateRawDataBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The SSL certificate serving the `AuthorizedCertificate` resource. This
     * must be obtained independently from a certificate authority.
     * </pre>
     *
     * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
     */
    public Builder clearCertificateRawData() {
      if (certificateRawDataBuilder_ == null) {
        certificateRawData_ = null;
        onChanged();
      } else {
        certificateRawData_ = null;
        certificateRawDataBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The SSL certificate serving the `AuthorizedCertificate` resource. This
     * must be obtained independently from a certificate authority.
     * </pre>
     *
     * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
     */
    public com.google.appengine.v1.CertificateRawData.Builder getCertificateRawDataBuilder() {
      
      onChanged();
      return getCertificateRawDataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The SSL certificate serving the `AuthorizedCertificate` resource. This
     * must be obtained independently from a certificate authority.
     * </pre>
     *
     * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
     */
    public com.google.appengine.v1.CertificateRawDataOrBuilder getCertificateRawDataOrBuilder() {
      if (certificateRawDataBuilder_ != null) {
        return certificateRawDataBuilder_.getMessageOrBuilder();
      } else {
        return certificateRawData_ == null ?
            com.google.appengine.v1.CertificateRawData.getDefaultInstance() : certificateRawData_;
      }
    }
    /**
     * <pre>
     * The SSL certificate serving the `AuthorizedCertificate` resource. This
     * must be obtained independently from a certificate authority.
     * </pre>
     *
     * <code>.google.appengine.v1.CertificateRawData certificate_raw_data = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.appengine.v1.CertificateRawData, com.google.appengine.v1.CertificateRawData.Builder, com.google.appengine.v1.CertificateRawDataOrBuilder> 
        getCertificateRawDataFieldBuilder() {
      if (certificateRawDataBuilder_ == null) {
        certificateRawDataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.appengine.v1.CertificateRawData, com.google.appengine.v1.CertificateRawData.Builder, com.google.appengine.v1.CertificateRawDataOrBuilder>(
                getCertificateRawData(),
                getParentForChildren(),
                isClean());
        certificateRawData_ = null;
      }
      return certificateRawDataBuilder_;
    }

    private com.google.appengine.v1.ManagedCertificate managedCertificate_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.appengine.v1.ManagedCertificate, com.google.appengine.v1.ManagedCertificate.Builder, com.google.appengine.v1.ManagedCertificateOrBuilder> managedCertificateBuilder_;
    /**
     * <pre>
     * Only applicable if this certificate is managed by App Engine. Managed
     * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
     * updated or deleted via the `AuthorizedCertificates` API. If this
     * certificate is manually administered by the user, this field will be empty.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
     * @return Whether the managedCertificate field is set.
     */
    public boolean hasManagedCertificate() {
      return managedCertificateBuilder_ != null || managedCertificate_ != null;
    }
    /**
     * <pre>
     * Only applicable if this certificate is managed by App Engine. Managed
     * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
     * updated or deleted via the `AuthorizedCertificates` API. If this
     * certificate is manually administered by the user, this field will be empty.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
     * @return The managedCertificate.
     */
    public com.google.appengine.v1.ManagedCertificate getManagedCertificate() {
      if (managedCertificateBuilder_ == null) {
        return managedCertificate_ == null ? com.google.appengine.v1.ManagedCertificate.getDefaultInstance() : managedCertificate_;
      } else {
        return managedCertificateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Only applicable if this certificate is managed by App Engine. Managed
     * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
     * updated or deleted via the `AuthorizedCertificates` API. If this
     * certificate is manually administered by the user, this field will be empty.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
     */
    public Builder setManagedCertificate(com.google.appengine.v1.ManagedCertificate value) {
      if (managedCertificateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        managedCertificate_ = value;
        onChanged();
      } else {
        managedCertificateBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Only applicable if this certificate is managed by App Engine. Managed
     * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
     * updated or deleted via the `AuthorizedCertificates` API. If this
     * certificate is manually administered by the user, this field will be empty.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
     */
    public Builder setManagedCertificate(
        com.google.appengine.v1.ManagedCertificate.Builder builderForValue) {
      if (managedCertificateBuilder_ == null) {
        managedCertificate_ = builderForValue.build();
        onChanged();
      } else {
        managedCertificateBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Only applicable if this certificate is managed by App Engine. Managed
     * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
     * updated or deleted via the `AuthorizedCertificates` API. If this
     * certificate is manually administered by the user, this field will be empty.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
     */
    public Builder mergeManagedCertificate(com.google.appengine.v1.ManagedCertificate value) {
      if (managedCertificateBuilder_ == null) {
        if (managedCertificate_ != null) {
          managedCertificate_ =
            com.google.appengine.v1.ManagedCertificate.newBuilder(managedCertificate_).mergeFrom(value).buildPartial();
        } else {
          managedCertificate_ = value;
        }
        onChanged();
      } else {
        managedCertificateBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Only applicable if this certificate is managed by App Engine. Managed
     * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
     * updated or deleted via the `AuthorizedCertificates` API. If this
     * certificate is manually administered by the user, this field will be empty.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
     */
    public Builder clearManagedCertificate() {
      if (managedCertificateBuilder_ == null) {
        managedCertificate_ = null;
        onChanged();
      } else {
        managedCertificate_ = null;
        managedCertificateBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Only applicable if this certificate is managed by App Engine. Managed
     * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
     * updated or deleted via the `AuthorizedCertificates` API. If this
     * certificate is manually administered by the user, this field will be empty.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
     */
    public com.google.appengine.v1.ManagedCertificate.Builder getManagedCertificateBuilder() {
      
      onChanged();
      return getManagedCertificateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Only applicable if this certificate is managed by App Engine. Managed
     * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
     * updated or deleted via the `AuthorizedCertificates` API. If this
     * certificate is manually administered by the user, this field will be empty.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
     */
    public com.google.appengine.v1.ManagedCertificateOrBuilder getManagedCertificateOrBuilder() {
      if (managedCertificateBuilder_ != null) {
        return managedCertificateBuilder_.getMessageOrBuilder();
      } else {
        return managedCertificate_ == null ?
            com.google.appengine.v1.ManagedCertificate.getDefaultInstance() : managedCertificate_;
      }
    }
    /**
     * <pre>
     * Only applicable if this certificate is managed by App Engine. Managed
     * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
     * updated or deleted via the `AuthorizedCertificates` API. If this
     * certificate is manually administered by the user, this field will be empty.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>.google.appengine.v1.ManagedCertificate managed_certificate = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.appengine.v1.ManagedCertificate, com.google.appengine.v1.ManagedCertificate.Builder, com.google.appengine.v1.ManagedCertificateOrBuilder> 
        getManagedCertificateFieldBuilder() {
      if (managedCertificateBuilder_ == null) {
        managedCertificateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.appengine.v1.ManagedCertificate, com.google.appengine.v1.ManagedCertificate.Builder, com.google.appengine.v1.ManagedCertificateOrBuilder>(
                getManagedCertificate(),
                getParentForChildren(),
                isClean());
        managedCertificate_ = null;
      }
      return managedCertificateBuilder_;
    }

    private com.google.protobuf.LazyStringList visibleDomainMappings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureVisibleDomainMappingsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        visibleDomainMappings_ = new com.google.protobuf.LazyStringArrayList(visibleDomainMappings_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * The full paths to user visible Domain Mapping resources that have this
     * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
     * This may not represent the full list of mapped domain mappings if the user
     * does not have `VIEWER` permissions on all of the applications that have
     * this certificate mapped. See `domain_mappings_count` for a complete count.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string visible_domain_mappings = 8;</code>
     * @return A list containing the visibleDomainMappings.
     */
    public com.google.protobuf.ProtocolStringList
        getVisibleDomainMappingsList() {
      return visibleDomainMappings_.getUnmodifiableView();
    }
    /**
     * <pre>
     * The full paths to user visible Domain Mapping resources that have this
     * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
     * This may not represent the full list of mapped domain mappings if the user
     * does not have `VIEWER` permissions on all of the applications that have
     * this certificate mapped. See `domain_mappings_count` for a complete count.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string visible_domain_mappings = 8;</code>
     * @return The count of visibleDomainMappings.
     */
    public int getVisibleDomainMappingsCount() {
      return visibleDomainMappings_.size();
    }
    /**
     * <pre>
     * The full paths to user visible Domain Mapping resources that have this
     * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
     * This may not represent the full list of mapped domain mappings if the user
     * does not have `VIEWER` permissions on all of the applications that have
     * this certificate mapped. See `domain_mappings_count` for a complete count.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string visible_domain_mappings = 8;</code>
     * @param index The index of the element to return.
     * @return The visibleDomainMappings at the given index.
     */
    public java.lang.String getVisibleDomainMappings(int index) {
      return visibleDomainMappings_.get(index);
    }
    /**
     * <pre>
     * The full paths to user visible Domain Mapping resources that have this
     * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
     * This may not represent the full list of mapped domain mappings if the user
     * does not have `VIEWER` permissions on all of the applications that have
     * this certificate mapped. See `domain_mappings_count` for a complete count.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string visible_domain_mappings = 8;</code>
     * @param index The index of the value to return.
     * @return The bytes of the visibleDomainMappings at the given index.
     */
    public com.google.protobuf.ByteString
        getVisibleDomainMappingsBytes(int index) {
      return visibleDomainMappings_.getByteString(index);
    }
    /**
     * <pre>
     * The full paths to user visible Domain Mapping resources that have this
     * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
     * This may not represent the full list of mapped domain mappings if the user
     * does not have `VIEWER` permissions on all of the applications that have
     * this certificate mapped. See `domain_mappings_count` for a complete count.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string visible_domain_mappings = 8;</code>
     * @param index The index to set the value at.
     * @param value The visibleDomainMappings to set.
     * @return This builder for chaining.
     */
    public Builder setVisibleDomainMappings(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureVisibleDomainMappingsIsMutable();
      visibleDomainMappings_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The full paths to user visible Domain Mapping resources that have this
     * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
     * This may not represent the full list of mapped domain mappings if the user
     * does not have `VIEWER` permissions on all of the applications that have
     * this certificate mapped. See `domain_mappings_count` for a complete count.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string visible_domain_mappings = 8;</code>
     * @param value The visibleDomainMappings to add.
     * @return This builder for chaining.
     */
    public Builder addVisibleDomainMappings(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureVisibleDomainMappingsIsMutable();
      visibleDomainMappings_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The full paths to user visible Domain Mapping resources that have this
     * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
     * This may not represent the full list of mapped domain mappings if the user
     * does not have `VIEWER` permissions on all of the applications that have
     * this certificate mapped. See `domain_mappings_count` for a complete count.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string visible_domain_mappings = 8;</code>
     * @param values The visibleDomainMappings to add.
     * @return This builder for chaining.
     */
    public Builder addAllVisibleDomainMappings(
        java.lang.Iterable<java.lang.String> values) {
      ensureVisibleDomainMappingsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, visibleDomainMappings_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The full paths to user visible Domain Mapping resources that have this
     * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
     * This may not represent the full list of mapped domain mappings if the user
     * does not have `VIEWER` permissions on all of the applications that have
     * this certificate mapped. See `domain_mappings_count` for a complete count.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string visible_domain_mappings = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearVisibleDomainMappings() {
      visibleDomainMappings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The full paths to user visible Domain Mapping resources that have this
     * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
     * This may not represent the full list of mapped domain mappings if the user
     * does not have `VIEWER` permissions on all of the applications that have
     * this certificate mapped. See `domain_mappings_count` for a complete count.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>repeated string visible_domain_mappings = 8;</code>
     * @param value The bytes of the visibleDomainMappings to add.
     * @return This builder for chaining.
     */
    public Builder addVisibleDomainMappingsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureVisibleDomainMappingsIsMutable();
      visibleDomainMappings_.add(value);
      onChanged();
      return this;
    }

    private int domainMappingsCount_ ;
    /**
     * <pre>
     * Aggregate count of the domain mappings with this certificate mapped. This
     * count includes domain mappings on applications for which the user does not
     * have `VIEWER` permissions.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>int32 domain_mappings_count = 9;</code>
     * @return The domainMappingsCount.
     */
    @java.lang.Override
    public int getDomainMappingsCount() {
      return domainMappingsCount_;
    }
    /**
     * <pre>
     * Aggregate count of the domain mappings with this certificate mapped. This
     * count includes domain mappings on applications for which the user does not
     * have `VIEWER` permissions.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>int32 domain_mappings_count = 9;</code>
     * @param value The domainMappingsCount to set.
     * @return This builder for chaining.
     */
    public Builder setDomainMappingsCount(int value) {
      
      domainMappingsCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Aggregate count of the domain mappings with this certificate mapped. This
     * count includes domain mappings on applications for which the user does not
     * have `VIEWER` permissions.
     * Only returned by `GET` or `LIST` requests when specifically requested by
     * the `view=FULL_CERTIFICATE` option.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>int32 domain_mappings_count = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearDomainMappingsCount() {
      
      domainMappingsCount_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.appengine.v1.AuthorizedCertificate)
  }

  // @@protoc_insertion_point(class_scope:google.appengine.v1.AuthorizedCertificate)
  private static final com.google.appengine.v1.AuthorizedCertificate DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.appengine.v1.AuthorizedCertificate();
  }

  public static com.google.appengine.v1.AuthorizedCertificate getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AuthorizedCertificate>
      PARSER = new com.google.protobuf.AbstractParser<AuthorizedCertificate>() {
    @java.lang.Override
    public AuthorizedCertificate parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new AuthorizedCertificate(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<AuthorizedCertificate> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AuthorizedCertificate> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.appengine.v1.AuthorizedCertificate getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

