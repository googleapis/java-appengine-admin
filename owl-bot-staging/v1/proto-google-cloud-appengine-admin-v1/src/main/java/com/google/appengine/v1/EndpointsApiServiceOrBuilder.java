// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1/version.proto

package com.google.appengine.v1;

public interface EndpointsApiServiceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.appengine.v1.EndpointsApiService)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Endpoints service name which is the name of the "service" resource in the
   * Service Management API. For example "myapi.endpoints.myproject.cloud.goog"
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Endpoints service name which is the name of the "service" resource in the
   * Service Management API. For example "myapi.endpoints.myproject.cloud.goog"
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Endpoints service configuration ID as specified by the Service Management
   * API. For example "2016-09-19r1".
   * By default, the rollout strategy for Endpoints is `RolloutStrategy.FIXED`.
   * This means that Endpoints starts up with a particular configuration ID.
   * When a new configuration is rolled out, Endpoints must be given the new
   * configuration ID. The `config_id` field is used to give the configuration
   * ID and is required in this case.
   * Endpoints also has a rollout strategy called `RolloutStrategy.MANAGED`.
   * When using this, Endpoints fetches the latest configuration and does not
   * need the configuration ID. In this case, `config_id` must be omitted.
   * </pre>
   *
   * <code>string config_id = 2;</code>
   * @return The configId.
   */
  java.lang.String getConfigId();
  /**
   * <pre>
   * Endpoints service configuration ID as specified by the Service Management
   * API. For example "2016-09-19r1".
   * By default, the rollout strategy for Endpoints is `RolloutStrategy.FIXED`.
   * This means that Endpoints starts up with a particular configuration ID.
   * When a new configuration is rolled out, Endpoints must be given the new
   * configuration ID. The `config_id` field is used to give the configuration
   * ID and is required in this case.
   * Endpoints also has a rollout strategy called `RolloutStrategy.MANAGED`.
   * When using this, Endpoints fetches the latest configuration and does not
   * need the configuration ID. In this case, `config_id` must be omitted.
   * </pre>
   *
   * <code>string config_id = 2;</code>
   * @return The bytes for configId.
   */
  com.google.protobuf.ByteString
      getConfigIdBytes();

  /**
   * <pre>
   * Endpoints rollout strategy. If `FIXED`, `config_id` must be specified. If
   * `MANAGED`, `config_id` must be omitted.
   * </pre>
   *
   * <code>.google.appengine.v1.EndpointsApiService.RolloutStrategy rollout_strategy = 3;</code>
   * @return The enum numeric value on the wire for rolloutStrategy.
   */
  int getRolloutStrategyValue();
  /**
   * <pre>
   * Endpoints rollout strategy. If `FIXED`, `config_id` must be specified. If
   * `MANAGED`, `config_id` must be omitted.
   * </pre>
   *
   * <code>.google.appengine.v1.EndpointsApiService.RolloutStrategy rollout_strategy = 3;</code>
   * @return The rolloutStrategy.
   */
  com.google.appengine.v1.EndpointsApiService.RolloutStrategy getRolloutStrategy();

  /**
   * <pre>
   * Enable or disable trace sampling. By default, this is set to false for
   * enabled.
   * </pre>
   *
   * <code>bool disable_trace_sampling = 4;</code>
   * @return The disableTraceSampling.
   */
  boolean getDisableTraceSampling();
}
