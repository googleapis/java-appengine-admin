// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1/domain_mapping.proto

package com.google.appengine.v1;

/**
 * <pre>
 * SSL configuration for a `DomainMapping` resource.
 * </pre>
 *
 * Protobuf type {@code google.appengine.v1.SslSettings}
 */
public final class SslSettings extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.appengine.v1.SslSettings)
    SslSettingsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SslSettings.newBuilder() to construct.
  private SslSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SslSettings() {
    certificateId_ = "";
    sslManagementType_ = 0;
    pendingManagedCertificateId_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SslSettings();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SslSettings(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            certificateId_ = s;
            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            sslManagementType_ = rawValue;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            pendingManagedCertificateId_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.appengine.v1.DomainMappingProto.internal_static_google_appengine_v1_SslSettings_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.appengine.v1.DomainMappingProto.internal_static_google_appengine_v1_SslSettings_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.appengine.v1.SslSettings.class, com.google.appengine.v1.SslSettings.Builder.class);
  }

  /**
   * <pre>
   * The SSL management type for this domain.
   * </pre>
   *
   * Protobuf enum {@code google.appengine.v1.SslSettings.SslManagementType}
   */
  public enum SslManagementType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Defaults to `AUTOMATIC`.
     * </pre>
     *
     * <code>SSL_MANAGEMENT_TYPE_UNSPECIFIED = 0;</code>
     */
    SSL_MANAGEMENT_TYPE_UNSPECIFIED(0),
    /**
     * <pre>
     * SSL support for this domain is configured automatically. The mapped SSL
     * certificate will be automatically renewed.
     * </pre>
     *
     * <code>AUTOMATIC = 1;</code>
     */
    AUTOMATIC(1),
    /**
     * <pre>
     * SSL support for this domain is configured manually by the user. Either
     * the domain has no SSL support or a user-obtained SSL certificate has been
     * explictly mapped to this domain.
     * </pre>
     *
     * <code>MANUAL = 2;</code>
     */
    MANUAL(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Defaults to `AUTOMATIC`.
     * </pre>
     *
     * <code>SSL_MANAGEMENT_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int SSL_MANAGEMENT_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * SSL support for this domain is configured automatically. The mapped SSL
     * certificate will be automatically renewed.
     * </pre>
     *
     * <code>AUTOMATIC = 1;</code>
     */
    public static final int AUTOMATIC_VALUE = 1;
    /**
     * <pre>
     * SSL support for this domain is configured manually by the user. Either
     * the domain has no SSL support or a user-obtained SSL certificate has been
     * explictly mapped to this domain.
     * </pre>
     *
     * <code>MANUAL = 2;</code>
     */
    public static final int MANUAL_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SslManagementType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SslManagementType forNumber(int value) {
      switch (value) {
        case 0: return SSL_MANAGEMENT_TYPE_UNSPECIFIED;
        case 1: return AUTOMATIC;
        case 2: return MANUAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SslManagementType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SslManagementType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SslManagementType>() {
            public SslManagementType findValueByNumber(int number) {
              return SslManagementType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.appengine.v1.SslSettings.getDescriptor().getEnumTypes().get(0);
    }

    private static final SslManagementType[] VALUES = values();

    public static SslManagementType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SslManagementType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.appengine.v1.SslSettings.SslManagementType)
  }

  public static final int CERTIFICATE_ID_FIELD_NUMBER = 1;
  private volatile java.lang.Object certificateId_;
  /**
   * <pre>
   * ID of the `AuthorizedCertificate` resource configuring SSL for the
   * application. Clearing this field will remove SSL support.
   * By default, a managed certificate is automatically created for every
   * domain mapping. To omit SSL support or to configure SSL manually, specify
   * `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must
   * be authorized to administer the `AuthorizedCertificate` resource to
   * manually map it to a `DomainMapping` resource.
   * Example: `12345`.
   * </pre>
   *
   * <code>string certificate_id = 1;</code>
   * @return The certificateId.
   */
  @java.lang.Override
  public java.lang.String getCertificateId() {
    java.lang.Object ref = certificateId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      certificateId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * ID of the `AuthorizedCertificate` resource configuring SSL for the
   * application. Clearing this field will remove SSL support.
   * By default, a managed certificate is automatically created for every
   * domain mapping. To omit SSL support or to configure SSL manually, specify
   * `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must
   * be authorized to administer the `AuthorizedCertificate` resource to
   * manually map it to a `DomainMapping` resource.
   * Example: `12345`.
   * </pre>
   *
   * <code>string certificate_id = 1;</code>
   * @return The bytes for certificateId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCertificateIdBytes() {
    java.lang.Object ref = certificateId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      certificateId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SSL_MANAGEMENT_TYPE_FIELD_NUMBER = 3;
  private int sslManagementType_;
  /**
   * <pre>
   * SSL management type for this domain. If `AUTOMATIC`, a managed certificate
   * is automatically provisioned. If `MANUAL`, `certificate_id` must be
   * manually specified in order to configure SSL for this domain.
   * </pre>
   *
   * <code>.google.appengine.v1.SslSettings.SslManagementType ssl_management_type = 3;</code>
   * @return The enum numeric value on the wire for sslManagementType.
   */
  @java.lang.Override public int getSslManagementTypeValue() {
    return sslManagementType_;
  }
  /**
   * <pre>
   * SSL management type for this domain. If `AUTOMATIC`, a managed certificate
   * is automatically provisioned. If `MANUAL`, `certificate_id` must be
   * manually specified in order to configure SSL for this domain.
   * </pre>
   *
   * <code>.google.appengine.v1.SslSettings.SslManagementType ssl_management_type = 3;</code>
   * @return The sslManagementType.
   */
  @java.lang.Override public com.google.appengine.v1.SslSettings.SslManagementType getSslManagementType() {
    @SuppressWarnings("deprecation")
    com.google.appengine.v1.SslSettings.SslManagementType result = com.google.appengine.v1.SslSettings.SslManagementType.valueOf(sslManagementType_);
    return result == null ? com.google.appengine.v1.SslSettings.SslManagementType.UNRECOGNIZED : result;
  }

  public static final int PENDING_MANAGED_CERTIFICATE_ID_FIELD_NUMBER = 4;
  private volatile java.lang.Object pendingManagedCertificateId_;
  /**
   * <pre>
   * ID of the managed `AuthorizedCertificate` resource currently being
   * provisioned, if applicable. Until the new managed certificate has been
   * successfully provisioned, the previous SSL state will be preserved. Once
   * the provisioning process completes, the `certificate_id` field will reflect
   * the new managed certificate and this field will be left empty. To remove
   * SSL support while there is still a pending managed certificate, clear the
   * `certificate_id` field with an `UpdateDomainMappingRequest`.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>string pending_managed_certificate_id = 4;</code>
   * @return The pendingManagedCertificateId.
   */
  @java.lang.Override
  public java.lang.String getPendingManagedCertificateId() {
    java.lang.Object ref = pendingManagedCertificateId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      pendingManagedCertificateId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * ID of the managed `AuthorizedCertificate` resource currently being
   * provisioned, if applicable. Until the new managed certificate has been
   * successfully provisioned, the previous SSL state will be preserved. Once
   * the provisioning process completes, the `certificate_id` field will reflect
   * the new managed certificate and this field will be left empty. To remove
   * SSL support while there is still a pending managed certificate, clear the
   * `certificate_id` field with an `UpdateDomainMappingRequest`.
   * &#64;OutputOnly
   * </pre>
   *
   * <code>string pending_managed_certificate_id = 4;</code>
   * @return The bytes for pendingManagedCertificateId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPendingManagedCertificateIdBytes() {
    java.lang.Object ref = pendingManagedCertificateId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      pendingManagedCertificateId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getCertificateIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, certificateId_);
    }
    if (sslManagementType_ != com.google.appengine.v1.SslSettings.SslManagementType.SSL_MANAGEMENT_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(3, sslManagementType_);
    }
    if (!getPendingManagedCertificateIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, pendingManagedCertificateId_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getCertificateIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, certificateId_);
    }
    if (sslManagementType_ != com.google.appengine.v1.SslSettings.SslManagementType.SSL_MANAGEMENT_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, sslManagementType_);
    }
    if (!getPendingManagedCertificateIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, pendingManagedCertificateId_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.appengine.v1.SslSettings)) {
      return super.equals(obj);
    }
    com.google.appengine.v1.SslSettings other = (com.google.appengine.v1.SslSettings) obj;

    if (!getCertificateId()
        .equals(other.getCertificateId())) return false;
    if (sslManagementType_ != other.sslManagementType_) return false;
    if (!getPendingManagedCertificateId()
        .equals(other.getPendingManagedCertificateId())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + CERTIFICATE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getCertificateId().hashCode();
    hash = (37 * hash) + SSL_MANAGEMENT_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + sslManagementType_;
    hash = (37 * hash) + PENDING_MANAGED_CERTIFICATE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getPendingManagedCertificateId().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.appengine.v1.SslSettings parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.appengine.v1.SslSettings parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.appengine.v1.SslSettings parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.appengine.v1.SslSettings parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.appengine.v1.SslSettings parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.appengine.v1.SslSettings parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.appengine.v1.SslSettings parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.appengine.v1.SslSettings parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.appengine.v1.SslSettings parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.appengine.v1.SslSettings parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.appengine.v1.SslSettings parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.appengine.v1.SslSettings parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.appengine.v1.SslSettings prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SSL configuration for a `DomainMapping` resource.
   * </pre>
   *
   * Protobuf type {@code google.appengine.v1.SslSettings}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.appengine.v1.SslSettings)
      com.google.appengine.v1.SslSettingsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.appengine.v1.DomainMappingProto.internal_static_google_appengine_v1_SslSettings_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.appengine.v1.DomainMappingProto.internal_static_google_appengine_v1_SslSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.appengine.v1.SslSettings.class, com.google.appengine.v1.SslSettings.Builder.class);
    }

    // Construct using com.google.appengine.v1.SslSettings.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      certificateId_ = "";

      sslManagementType_ = 0;

      pendingManagedCertificateId_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.appengine.v1.DomainMappingProto.internal_static_google_appengine_v1_SslSettings_descriptor;
    }

    @java.lang.Override
    public com.google.appengine.v1.SslSettings getDefaultInstanceForType() {
      return com.google.appengine.v1.SslSettings.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.appengine.v1.SslSettings build() {
      com.google.appengine.v1.SslSettings result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.appengine.v1.SslSettings buildPartial() {
      com.google.appengine.v1.SslSettings result = new com.google.appengine.v1.SslSettings(this);
      result.certificateId_ = certificateId_;
      result.sslManagementType_ = sslManagementType_;
      result.pendingManagedCertificateId_ = pendingManagedCertificateId_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.appengine.v1.SslSettings) {
        return mergeFrom((com.google.appengine.v1.SslSettings)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.appengine.v1.SslSettings other) {
      if (other == com.google.appengine.v1.SslSettings.getDefaultInstance()) return this;
      if (!other.getCertificateId().isEmpty()) {
        certificateId_ = other.certificateId_;
        onChanged();
      }
      if (other.sslManagementType_ != 0) {
        setSslManagementTypeValue(other.getSslManagementTypeValue());
      }
      if (!other.getPendingManagedCertificateId().isEmpty()) {
        pendingManagedCertificateId_ = other.pendingManagedCertificateId_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.appengine.v1.SslSettings parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.appengine.v1.SslSettings) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object certificateId_ = "";
    /**
     * <pre>
     * ID of the `AuthorizedCertificate` resource configuring SSL for the
     * application. Clearing this field will remove SSL support.
     * By default, a managed certificate is automatically created for every
     * domain mapping. To omit SSL support or to configure SSL manually, specify
     * `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must
     * be authorized to administer the `AuthorizedCertificate` resource to
     * manually map it to a `DomainMapping` resource.
     * Example: `12345`.
     * </pre>
     *
     * <code>string certificate_id = 1;</code>
     * @return The certificateId.
     */
    public java.lang.String getCertificateId() {
      java.lang.Object ref = certificateId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        certificateId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * ID of the `AuthorizedCertificate` resource configuring SSL for the
     * application. Clearing this field will remove SSL support.
     * By default, a managed certificate is automatically created for every
     * domain mapping. To omit SSL support or to configure SSL manually, specify
     * `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must
     * be authorized to administer the `AuthorizedCertificate` resource to
     * manually map it to a `DomainMapping` resource.
     * Example: `12345`.
     * </pre>
     *
     * <code>string certificate_id = 1;</code>
     * @return The bytes for certificateId.
     */
    public com.google.protobuf.ByteString
        getCertificateIdBytes() {
      java.lang.Object ref = certificateId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        certificateId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * ID of the `AuthorizedCertificate` resource configuring SSL for the
     * application. Clearing this field will remove SSL support.
     * By default, a managed certificate is automatically created for every
     * domain mapping. To omit SSL support or to configure SSL manually, specify
     * `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must
     * be authorized to administer the `AuthorizedCertificate` resource to
     * manually map it to a `DomainMapping` resource.
     * Example: `12345`.
     * </pre>
     *
     * <code>string certificate_id = 1;</code>
     * @param value The certificateId to set.
     * @return This builder for chaining.
     */
    public Builder setCertificateId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      certificateId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ID of the `AuthorizedCertificate` resource configuring SSL for the
     * application. Clearing this field will remove SSL support.
     * By default, a managed certificate is automatically created for every
     * domain mapping. To omit SSL support or to configure SSL manually, specify
     * `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must
     * be authorized to administer the `AuthorizedCertificate` resource to
     * manually map it to a `DomainMapping` resource.
     * Example: `12345`.
     * </pre>
     *
     * <code>string certificate_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearCertificateId() {
      
      certificateId_ = getDefaultInstance().getCertificateId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ID of the `AuthorizedCertificate` resource configuring SSL for the
     * application. Clearing this field will remove SSL support.
     * By default, a managed certificate is automatically created for every
     * domain mapping. To omit SSL support or to configure SSL manually, specify
     * `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must
     * be authorized to administer the `AuthorizedCertificate` resource to
     * manually map it to a `DomainMapping` resource.
     * Example: `12345`.
     * </pre>
     *
     * <code>string certificate_id = 1;</code>
     * @param value The bytes for certificateId to set.
     * @return This builder for chaining.
     */
    public Builder setCertificateIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      certificateId_ = value;
      onChanged();
      return this;
    }

    private int sslManagementType_ = 0;
    /**
     * <pre>
     * SSL management type for this domain. If `AUTOMATIC`, a managed certificate
     * is automatically provisioned. If `MANUAL`, `certificate_id` must be
     * manually specified in order to configure SSL for this domain.
     * </pre>
     *
     * <code>.google.appengine.v1.SslSettings.SslManagementType ssl_management_type = 3;</code>
     * @return The enum numeric value on the wire for sslManagementType.
     */
    @java.lang.Override public int getSslManagementTypeValue() {
      return sslManagementType_;
    }
    /**
     * <pre>
     * SSL management type for this domain. If `AUTOMATIC`, a managed certificate
     * is automatically provisioned. If `MANUAL`, `certificate_id` must be
     * manually specified in order to configure SSL for this domain.
     * </pre>
     *
     * <code>.google.appengine.v1.SslSettings.SslManagementType ssl_management_type = 3;</code>
     * @param value The enum numeric value on the wire for sslManagementType to set.
     * @return This builder for chaining.
     */
    public Builder setSslManagementTypeValue(int value) {
      
      sslManagementType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * SSL management type for this domain. If `AUTOMATIC`, a managed certificate
     * is automatically provisioned. If `MANUAL`, `certificate_id` must be
     * manually specified in order to configure SSL for this domain.
     * </pre>
     *
     * <code>.google.appengine.v1.SslSettings.SslManagementType ssl_management_type = 3;</code>
     * @return The sslManagementType.
     */
    @java.lang.Override
    public com.google.appengine.v1.SslSettings.SslManagementType getSslManagementType() {
      @SuppressWarnings("deprecation")
      com.google.appengine.v1.SslSettings.SslManagementType result = com.google.appengine.v1.SslSettings.SslManagementType.valueOf(sslManagementType_);
      return result == null ? com.google.appengine.v1.SslSettings.SslManagementType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * SSL management type for this domain. If `AUTOMATIC`, a managed certificate
     * is automatically provisioned. If `MANUAL`, `certificate_id` must be
     * manually specified in order to configure SSL for this domain.
     * </pre>
     *
     * <code>.google.appengine.v1.SslSettings.SslManagementType ssl_management_type = 3;</code>
     * @param value The sslManagementType to set.
     * @return This builder for chaining.
     */
    public Builder setSslManagementType(com.google.appengine.v1.SslSettings.SslManagementType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      sslManagementType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * SSL management type for this domain. If `AUTOMATIC`, a managed certificate
     * is automatically provisioned. If `MANUAL`, `certificate_id` must be
     * manually specified in order to configure SSL for this domain.
     * </pre>
     *
     * <code>.google.appengine.v1.SslSettings.SslManagementType ssl_management_type = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSslManagementType() {
      
      sslManagementType_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object pendingManagedCertificateId_ = "";
    /**
     * <pre>
     * ID of the managed `AuthorizedCertificate` resource currently being
     * provisioned, if applicable. Until the new managed certificate has been
     * successfully provisioned, the previous SSL state will be preserved. Once
     * the provisioning process completes, the `certificate_id` field will reflect
     * the new managed certificate and this field will be left empty. To remove
     * SSL support while there is still a pending managed certificate, clear the
     * `certificate_id` field with an `UpdateDomainMappingRequest`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string pending_managed_certificate_id = 4;</code>
     * @return The pendingManagedCertificateId.
     */
    public java.lang.String getPendingManagedCertificateId() {
      java.lang.Object ref = pendingManagedCertificateId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        pendingManagedCertificateId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * ID of the managed `AuthorizedCertificate` resource currently being
     * provisioned, if applicable. Until the new managed certificate has been
     * successfully provisioned, the previous SSL state will be preserved. Once
     * the provisioning process completes, the `certificate_id` field will reflect
     * the new managed certificate and this field will be left empty. To remove
     * SSL support while there is still a pending managed certificate, clear the
     * `certificate_id` field with an `UpdateDomainMappingRequest`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string pending_managed_certificate_id = 4;</code>
     * @return The bytes for pendingManagedCertificateId.
     */
    public com.google.protobuf.ByteString
        getPendingManagedCertificateIdBytes() {
      java.lang.Object ref = pendingManagedCertificateId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pendingManagedCertificateId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * ID of the managed `AuthorizedCertificate` resource currently being
     * provisioned, if applicable. Until the new managed certificate has been
     * successfully provisioned, the previous SSL state will be preserved. Once
     * the provisioning process completes, the `certificate_id` field will reflect
     * the new managed certificate and this field will be left empty. To remove
     * SSL support while there is still a pending managed certificate, clear the
     * `certificate_id` field with an `UpdateDomainMappingRequest`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string pending_managed_certificate_id = 4;</code>
     * @param value The pendingManagedCertificateId to set.
     * @return This builder for chaining.
     */
    public Builder setPendingManagedCertificateId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pendingManagedCertificateId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ID of the managed `AuthorizedCertificate` resource currently being
     * provisioned, if applicable. Until the new managed certificate has been
     * successfully provisioned, the previous SSL state will be preserved. Once
     * the provisioning process completes, the `certificate_id` field will reflect
     * the new managed certificate and this field will be left empty. To remove
     * SSL support while there is still a pending managed certificate, clear the
     * `certificate_id` field with an `UpdateDomainMappingRequest`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string pending_managed_certificate_id = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearPendingManagedCertificateId() {
      
      pendingManagedCertificateId_ = getDefaultInstance().getPendingManagedCertificateId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ID of the managed `AuthorizedCertificate` resource currently being
     * provisioned, if applicable. Until the new managed certificate has been
     * successfully provisioned, the previous SSL state will be preserved. Once
     * the provisioning process completes, the `certificate_id` field will reflect
     * the new managed certificate and this field will be left empty. To remove
     * SSL support while there is still a pending managed certificate, clear the
     * `certificate_id` field with an `UpdateDomainMappingRequest`.
     * &#64;OutputOnly
     * </pre>
     *
     * <code>string pending_managed_certificate_id = 4;</code>
     * @param value The bytes for pendingManagedCertificateId to set.
     * @return This builder for chaining.
     */
    public Builder setPendingManagedCertificateIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pendingManagedCertificateId_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.appengine.v1.SslSettings)
  }

  // @@protoc_insertion_point(class_scope:google.appengine.v1.SslSettings)
  private static final com.google.appengine.v1.SslSettings DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.appengine.v1.SslSettings();
  }

  public static com.google.appengine.v1.SslSettings getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SslSettings>
      PARSER = new com.google.protobuf.AbstractParser<SslSettings>() {
    @java.lang.Override
    public SslSettings parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SslSettings(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SslSettings> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SslSettings> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.appengine.v1.SslSettings getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

